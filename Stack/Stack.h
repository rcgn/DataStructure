//Stack.h
#ifndef _STACK_H_
#define _STACK_H_

#define  TRUE   1
#define  FALSE  0
#define  ERROR  0xFFFFFFFF

#define  BOOL   char

#define  STACK_MIN    0x100
#define  STACK_MAX    0x7FFFFFFE //此处按照4个字节的int型大小来定义，若int型的大小有变化，则需更改

//定义栈结构体
typedef struct tag_Stack
{
	int*   stack;
	int   height;
	int   size;
}ZStack;
////////////////////////////////////////////////////////////////
//函数名称：PopStack
//作    者：赵  政
//输    入：ZStack* p_stack 栈指针
//输    出：无
//返    回：int 原栈顶元素
//影响结果：弹出栈顶元素，改变栈的高度height
////////////////////////////////////////////////////////////////
int   PopStack(ZStack* p_stack);

////////////////////////////////////////////////////////////////
//函数名称：PushStack
//作    者：赵  政
//输    入：ZStack* p_stack 栈指针
//          int     p_num   要入栈的元素
//输    出：无
//返    回：BOOL 操作是否成功，如果栈满则重新分配内存，若超过上界
//          则返回FALSE
//影响结果：将元素压入栈中，改变栈的高度height
////////////////////////////////////////////////////////////////
BOOL  PushStack(ZStack* p_stack, int p_num);

////////////////////////////////////////////////////////////////
//函数名称：IsEmpty
//作    者：赵  政
//输    入：ZStack* p_stack 栈指针
//输    出：无
//返    回：BOOL 判断栈是否为空，若为空，则返回TRUE，否则返回FALSE
//影响结果：无
////////////////////////////////////////////////////////////////
BOOL  IsEmpty(ZStack* p_stack);

////////////////////////////////////////////////////////////////
//函数名称：IsFull
//作    者：赵  政
//输    入：ZStack* p_stack 栈指针
//输    出：无
//返    回：BOOL 判断栈是否满，若满，则返回TRUE，否则返回FALSE
//影响结果：无
////////////////////////////////////////////////////////////////
BOOL  IsFull(ZStack* p_stack);

////////////////////////////////////////////////////////////////
//函数名称：EnlargeStack
//作    者：赵  政
//输    入：ZStack* p_stack 栈指针
//输    出：无
//返    回：BOOL 操作是否成功，若成功，则返回TRUE，否则返回FALSE
//影响结果：入栈时若栈存储空间不够，申请原内存2倍大小的内存空间，
//          并修改size，将栈拷贝到新内存空间，并free原内存空间。
////////////////////////////////////////////////////////////////
BOOL  EnlargeStack(ZStack* p_stack);

////////////////////////////////////////////////////////////////
//函数名称：InitStack
//作    者：赵  政
//输    入：ZStack* p_stack 栈指针
//          int     p_size  初始栈大小，若小于MIN，则按MIN分配大小
//输    出：无
//返    回：BOOL 操作是否成功，若成功，则返回TRUE，否则返回FALSE
//影响结果：新定义一个栈时，首先调用此函数，用于初始化栈空间，分配
//          栈初始内存，及初始化
////////////////////////////////////////////////////////////////
BOOL  InitStack(ZStack* p_stack,int p_size);

////////////////////////////////////////////////////////////////
//函数名称：DeleteStack
//作    者：赵  政
//输    入：ZStack* p_stack 栈指针
//输    出：无
//返    回：void
//影响结果：删除一个栈，并将分配的内存free掉
////////////////////////////////////////////////////////////////
void  DeleteStack(ZStack* p_stack);

////////////////////////////////////////////////////////////////
//函数名称：GetStackSize
//作    者：赵  政
//输    入：ZStack* p_stack 栈指针
//输    出：无
//返    回：int 返回栈的尺寸size
//影响结果：返回栈的尺寸
////////////////////////////////////////////////////////////////
int  GetStackSize(ZStack* p_stack);

////////////////////////////////////////////////////////////////
//函数名称：GetStackHeight
//作    者：赵  政
//输    入：ZStack* p_stack 栈指针
//输    出：无
//返    回：int 返回栈的高度
//影响结果：返回栈的高度
////////////////////////////////////////////////////////////////
int  GetStackHeight(ZStack* p_stack);

////////////////////////////////////////////////////////////////
//函数名称：GetStackTop
//作    者：赵  政
//输    入：ZStack* p_stack 栈指针
//输    出：无
//返    回：int 返回栈顶元素
//影响结果：返回栈的高度
////////////////////////////////////////////////////////////////
int  GetStackTop(ZStack* p_stack);

#endif
